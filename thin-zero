#!/usr/bin/perl -w
#
#
#
use strict;
use Getopt::Std;
use POSIX qw(:termios_h);

#
# Do magic to read a single key with no <return>
#
my $fd_stdin = fileno(STDIN);
my $term     = POSIX::Termios->new();
$term->getattr($fd_stdin);
my $oterm     = $term->getlflag();

my $echo     = ECHO | ECHOK | ICANON;
my $noecho   = $oterm & ~$echo;

sub cbreak {
    $term->setlflag($noecho);  # ok, so i don't want echo either
    $term->setcc(VTIME, 1);
    $term->setattr($fd_stdin, TCSANOW);
}

sub cooked {
    $term->setlflag($oterm);
    $term->setcc(VTIME, 0);
    $term->setattr($fd_stdin, TCSANOW);
}

sub readkey {
    my $key = '';
    cbreak();
    sysread(STDIN, $key, 1);
    cooked();
    return $key;
}

END { cooked() }

$| = 1;
my $dir = ".";
(my $my_name = $0) =~ s:^.*/::g;

sub usage () {

die <<EOT;
Usage: $my_name [-f|y|h|u]
  -y - Yes, remove
  -f - Force yes
  -h - Help (show usage)
  -u - Usage

EOT

}

#
# Process command line arguments
#
my %opts;
getopts('fy', \%opts) || usage;

$opts{f} = 1 if $opts{y};
$opts{u} = 1 if $opts{h};
usage if $opts{u};

opendir(DIR, $dir) || die "$my_name: ERROR: Can't open directory '$dir': $!\n";
my @files = sort grep {-f $_} grep { /./ } readdir(DIR);
closedir(DIR);

for my $file (@files) {

    next if (-l $file ); # skip symlinks

    if ( (stat($file))[7] == 0 ) {

        my $key;

        if ( $opts{f} ) {

            $key = "y";

        } else {

            #
            # Get user input
            #
            $| = 1;
            print "$my_name: remove regular empty file `$file'? (y/n/q) ";
            until (defined ($key = lc(readkey())) && $key =~ /[ynq\004]/){};
            chomp($key);

        }

        if ( $key eq 'y' ) {

            unlink($file) || die "$my_name: Can't unlink `$file': $!\n";
            print "removed `$file'\n";

        } elsif ($key eq "\004") {

            die "EOF\n";

        } elsif ($key eq 'q') {

            #
            # I want to quit now
            #
            die $/;

        } else {

            print $/;

        }

    }

}

