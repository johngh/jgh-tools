#!/bin/bash
#
# Dot this script, don't just run it as a script
# (which would run it in its own sub-shell)
# because you need the variables to be set in the context of your current shell.
# Put this file in ~/.ssh/ssh-agent and add this to your .bash-aliases:
# alias ssh_agent='. ~/.ssh/ssh-agent'
#

if [ -x /usr/bin/ssh-agent ]
then
    SSH_AGENT=/usr/bin/ssh-agent
    SSH_ADD=/usr/bin/ssh-add
elif [ -x /usr/local/bin/ssh-agent ]
then
    SSH_AGENT=/usr/local/bin/ssh-agent
    SSH_ADD=/usr/local/bin/ssh-add
else
    echo "Can't find ssh-agent"
    SSH_AGENT=/bin/false
    SSH_ADD=/bin/false
fi

SSH_USE_FORWARDED=0
case "$1" in
"-f" )
    SSH_VERB=2
    SSH_USE_FORWARDED=1
    ;;
"-v" )
    SSH_VERB=1
    ;;
"-vv" )
    SSH_VERB=2
    ;;
* )
    SSH_VERB=0
    ;;
esac

set -u

if [ $SSH_USE_FORWARDED -ne 1 ]
then
    ps -fu$LOGNAME|grep "ssh-agent$" > /dev/null
    if [ $? != 0 ]
    then
        eval $($SSH_AGENT)
    fi
fi
unset SSH_USE_FORWARDED

SSH_FOUND_SOCKS=""
SSH_AGENT_PID=""
for SSH_FOUND_SOCK in $(find /tmp/ssh-???*[0-9]* -type s -user ${LOGNAME} -name "agent.[0-9]*" 2>/dev/null)
do

    SSH_SOCK_PID=${SSH_FOUND_SOCK##*.}
    SSH_AGENT_PID=$(ps -fu${LOGNAME}|
        awk '/ssh-agent$/ && ( $2=='${SSH_SOCK_PID}' || $3=='${SSH_SOCK_PID}' || $2=='${SSH_SOCK_PID}' +1 || $2=='${SSH_SOCK_PID}' +3) {print $2}'
    )

    # echo "SSH_SOCK_PID=$SSH_SOCK_PID"

    if [ -n "$SSH_AGENT_PID" ]
    then
        SSH_AUTH_SOCK=$SSH_FOUND_SOCK
        break 2
    else
        if [ $SSH_VERB = 2 ]
        then
            echo >&2 "# Skipping sock ${SSH_FOUND_SOCK} (no agent PID)"
        fi
        SSH_SSHD_PROC=$(ps -fu${LOGNAME} | awk '$2 == '${SSH_SOCK_PID}'{print $0}' | grep sshd)
        if [ $? = 0 ]
        then
            if [ $SSH_VERB -gt 1 ]
            then
                echo "Could use: $SSH_SSHD_PROC"
            fi
            SSH_FOUND_SOCKS="$SSH_FOUND_SOCKS $SSH_FOUND_SOCK"
        else
            SSH_FOUND_SOCK_PID=${SSH_FOUND_SOCK##*.}
            for SSH_FOUND_PID in $(ps -fu${LOGNAME} | awk '/ssh-agent$/ { print $2 }')
            do
                let SSH_PID_DIFF=SSH_FOUND_PID-SSH_FOUND_SOCK_PID
                if [ $SSH_PID_DIFF -lt 5 ]
                then
                    echo "Found socket PID $SSH_FOUND_SOCK_PID is $SSH_PID_DIFF less than $SSH_FOUND_PID"
                    SSH_AGENT_PID=$SSH_FOUND_PID
                    SSH_FOUND_SOCKS="$SSH_FOUND_SOCKS $SSH_FOUND_SOCK"
                else
                    echo "Dead socket? $SSH_FOUND_SOCK"
                fi
            done
        fi
        unset SSH_SSHD_PROC SSH_FOUND_SOCK_PID SSH_FOUND_PID SSH_PID_DIFF
    fi

done

if [ -n "$SSH_AGENT_PID" ]
then

    export SSH_AGENT_PID;

else

    for SSH_FOUND_SOCK in $SSH_FOUND_SOCKS
    do

        echo "WARNING: Using fowarded agent sock [$SSH_FOUND_SOCK] with no PID"
        SSH_AUTH_SOCK=${SSH_FOUND_SOCK}
        break 2

    done

    # let SSH_AGENT_PID=SSH_SOCK_PID+3
    # ps -fu$LOGNAME | grep $SSH_AGENT_PID
    # echo "WARNING: Derived SSH_AGENT_PID (with SSH_SOCK_PID+3)"

fi

unset SSH_SOCK_PID SSH_FOUND_SOCK SSH_FOUND_SOCKS

export SSH_AUTH_SOCK;

$SSH_ADD -l > /dev/null 2>&1
if [ $? = 0 ]
then
    #
    # 2048 af:b2:7a:6e:a3:df:18:78:ad:25:07:9b:c4:ff:01:58 /u/harrij/.ssh/id_rsa (RSA)
    #
    if [ $SSH_VERB = 0 ] && [ -n $SSH_AGENT_PID ]
    then
        echo "Using agent ${SSH_AGENT_PID}"
    fi
elif [ $? = 1 ]
then
    #
    # The agent has no identities.
    #
    # echo "Agent ${SSH_AGENT_PID} has no keys..."
    $SSH_ADD
elif [ $? = 2 ]
then
    #
    # Could not open a connection to your authentication agent.
    #
    echo "How did we get a socket & no agent?"
    eval $($SSH_AGENT)
    $SSH_ADD
fi
unset SSH_ADD SSH_AGENT

if [ -n "$SSH_AGENT_PID" ]
then
    if [ $SSH_VERB -ge 1 ]
    then
        echo "SSH_AGENT_PID=${SSH_AGENT_PID}"
    fi
else
    unset SSH_AGENT_PID;
fi

if [ $SSH_VERB -ge 1 ]
then
    echo "SSH_AUTH_SOCK=${SSH_AUTH_SOCK}"
fi
unset SSH_VERB

set +u

