#!/usr/bin/perl
######################################################################
# Extract URLs from a URL
# from webgrab.pl - Perl Power! - Michael Schilli 1998
######################################################################

use warnings;
use strict;

use Getopt::Std;                # command line parameter catcher
use LWP::UserAgent;             # WWW utility
use HTML::TreeBuilder;              # HTML parser
use URI::URL;                       # manipulate URLs
                                # define message functions
my (%opt, @urls, @links, %links);

sub info { print STDERR @_ if $opt{v};}     # verbose mode output
sub err  { print STDERR @_; }               # error output

getopts("f:huv", \%opt);        # get command line parameters
usage() if(defined $opt{h});        # help option set?

if(defined $opt{f}) {               # fetch URLs from a file ...
    push(@ARGV, $opt{f});               # specified on the command line
    while(<>) { chop; push(@urls, $_); }
} else {                        # ... or URLs from the command line
    push(@urls, @ARGV) || usage();
}

for my $url (@urls) {               # all URLs are now in @urls

    info "# GET URL $url ... ";  # message

    my $ua = LWP::UserAgent->new(
    agent => "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"
    ); # create user agent

    my $request = HTTP::Request->new('GET', $url); # create request
    my $response = $ua->request($request);      # carry out network access

    if($response->is_error) {       # error check 
        err "ERROR code: ", $response->code(), 
        " Message: ", $response->message(), " ( $url )\n";
    }

    my $doc = $response->content(); # document OK
    info "OK\n";

# extract links

    my $tree = HTML::TreeBuilder->new->parse($doc);

                                            # <A>, <AREA> and <IMG>
    for (@{$tree->extract_links(qw/a area img link/)}) {
    my $l = URI::URL->new($_->[0]);         # href attribute
    (my $s = $l->abs($url)) =~ s/#.*//g;    # URL absolute, #.. out
    $s =~ s|/\?D=A$|/|g;$s =~ s|/\?M=A$|/|g;
    $s =~ s|/\?N=D$|/|g;$s =~ s|/\?S=A$|/|g;
    $s =~ s|/\?C=D;O=A$|/|g;$s =~ s|/\?C=M;O=A$|/|g;
    $s =~ s|/\?C=N;O=D$|/|g;$s =~ s|/\?C=S;O=A$|/|g;

    push(@links, $s) unless $links{$s}++;   # output if new
    # push(@links, $s) unless $links{$l}++; # output if new
    }

    $tree->delete();                        # delete parse tree
}

if($opt{u}) {
    print join($/,@links), $/;
    exit;
} else {
    print join($/,(sort(@links))), $/;
}

sub usage {
###############################################################
    $0 =~ s|.*/||g;             # remove path

    print <<EOT;
usage: $0 -g [-f URLfile] [-t tarfile] URL ...      # get URLs
       $0 -e [-f URLfile] URL ...              # extract links
options:
        
        -u: unsorted
        -h: help
        -v: verbose
EOT
    exit 1;
}

